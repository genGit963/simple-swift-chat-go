<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://cdn.tailwindcss.com"></script>

    <title>SSCG</title>
  </head>
  <body class="w-full">
    <!-- main div -->
    <div class="mx-auto max-w-7xl">
      <h1 class="my-4 p-1 text-teal-500 text-3xl font-bold underline">
        Simple Swift Chat Go
      </h1>
      <p>
        <a
          href="https://github.com/genGit963/simple-swift-chat-go"
          class="text-blue-500 underline"
          >Its repo</a
        >
      </p>
      <div class="my-10 p-1" id="show-status"></div>
      <div class="text-left">
        <!-- username -->
        <label for="username">Username:</label>
        <input
          type="text"
          name="username"
          id="username"
          class="block m-2 w-1/3 p-1 border-2 border-gray-200"
        />

        <!-- text message -->
        <label for="message">Message:</label>
        <input
          type="text"
          name="message"
          id="message"
          class="block m-2 w-1/2 p-1 border-2 border-gray-200"
        />
        <!-- action -->
        <input type="hidden" name="action" id="action" class="hidden" />
        <button
          class="bg-blue-700 text-white p-2 m-2 rounded-md"
          onclick="sendMessage()"
        >
          Send Message
        </button>
      </div>

      <!-- chatting and active person section -->
      <div class="my-10 p-2 flex flex-row gap-4 space-between">
        <!-- chatting -->
        <div class="w-1/2 p-2 border-2 border-gray-200">
          <h2 class="text-2xl text-center">Chatting</h2>
          <div id="chatbox" class="text-blue-600">
            <ul id="chatlist">
              <h3 class="text-1xl text-gray-300">chats</h3>
              <hr />
            </ul>
          </div>
        </div>

        <!-- active persons -->
        <div class="w-1/2 p-2 h-fit bg-gray-200">
          <h2 class="text-2xl text-center">Active People</h2>
          <ul id="active-list" class="gap-1"></ul>
        </div>
      </div>
    </div>
  </body>

  <script>
    let socket = null;
    const chatsListElement = document.getElementById("chatlist");

    window.onbeforeunload = function () {
      console.log("Leaving...");
      let jsonWSPayloadData = {};
      jsonWSPayloadData.action = "left";

      socket.send(JSON.stringify(jsonWSPayloadData));
    };

    <!-- connect to websocket -->
    document.addEventListener("DOMContentLoaded", function () {
      socket = new WebSocket("ws://127.0.0.1:8080/ws");

      const statusDiv = document.getElementById("show-status");
      const connectedElement = `<p class="w-1/4 px-2 py-1 bg-green-600 text-white text-center rounded-md">Connected</p> `;
      const notConnectedElement = `<p class=" w-1/4 px-2 py-1 bg-red-600 text-center text-white rounded-md">Not Connected</p> `;
      socket.onopen = () => {
        statusDiv.innerHTML = connectedElement;
        console.log("Successfully Connected !!");
      };

      socket.onclose = () => {
        statusDiv.innerHTML = notConnectedElement;
        console.log("Connection closed !!");
      };

      socket.onerror = () => {
        console.log("Something error happend in websocket !!");
      };

      const activeUsersListElement = document.getElementById("active-list");
      socket.onmessage = (message) => {
        const websocketResponseData = JSON.parse(message.data);
        console.log("websocketResponse.data: ", websocketResponseData);

        switch (websocketResponseData.action) {
          case "list_users":
            console.log("list_users");
            while (activeUsersListElement.firstChild) {
              activeUsersListElement.removeChild(
                activeUsersListElement.firstChild
              );
            }
            if (websocketResponseData.connected_users.length > 0) {
              websocketResponseData.connected_users.forEach(
                (connected_user) => {
                  if (connected_user != "") {
                    const activeUserElement = document.createElement("li");
                    activeUserElement.textContent = connected_user;
                    activeUsersListElement.appendChild(activeUserElement);
                  }
                }
              );
            }
            break;

          case "broadcast":
            const messageElement = document.getElementById("chatlist");
            messageElement.insertAdjacentHTML(
              "beforeend",
              websocketResponseData?.message
            );
            break;

          default:
            console.log("no users");
        }
      };

      let usernameInputElement = document.getElementById("username");
      usernameInputElement.addEventListener("change", function () {
        let sendJsonWSPayloadData = {};
        console.log("username: ", this);
        sendJsonWSPayloadData.action = "username";
        sendJsonWSPayloadData.username = this.value;

        socket.send(JSON.stringify(sendJsonWSPayloadData));
      });
    });

    function sendMessage() {
      console.log("sending message...");
      const inputMessageElement = document.getElementById("message");
      const jsonWSPayloadData = {};
      jsonWSPayloadData.username = document.getElementById("username").value;
      jsonWSPayloadData.action = "broadcast";
      jsonWSPayloadData.message = inputMessageElement.value;

      socket.send(JSON.stringify(jsonWSPayloadData));
      inputMessageElement.value = "";
      console.log("\n\n sent :", jsonWSPayloadData);
    }
  </script>
</html>
ipt>
</html>
